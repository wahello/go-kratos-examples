// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// context./http.
const _ = http1.SupportPackageIsVersion1

type PostHTTPServer interface {
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostReply, error)

	DeletePost(context.Context, *DeletePostRequest) (*DeletePostReply, error)

	GetPost(context.Context, *GetPostRequest) (*GetPostReply, error)

	ListPost(context.Context, *ListPostRequest) (*ListPostReply, error)

	UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostReply, error)
}

func RegisterPostHTTPServer(s http1.ServiceRegistrar, srv PostHTTPServer) {
	s.RegisterService(&_HTTP_Post_serviceDesc, srv)
}

func _HTTP_Post_CreatePost_0(srv interface{}, ctx context.Context, req *http.Request) (interface{}, error) {
	var in CreatePostRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(PostServer).CreatePost(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Post_UpdatePost_0(srv interface{}, ctx context.Context, req *http.Request) (interface{}, error) {
	var in UpdatePostRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(PostServer).UpdatePost(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Post_DeletePost_0(srv interface{}, ctx context.Context, req *http.Request) (interface{}, error) {
	var in DeletePostRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(PostServer).DeletePost(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Post_GetPost_0(srv interface{}, ctx context.Context, req *http.Request) (interface{}, error) {
	var in GetPostRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(PostServer).GetPost(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Post_ListPost_0(srv interface{}, ctx context.Context, req *http.Request) (interface{}, error) {
	var in ListPostRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(PostServer).ListPost(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _HTTP_Post_serviceDesc = http1.ServiceDesc{
	ServiceName: "api.blog.v1.Post",
	HandlerType: (*PostHTTPServer)(nil),
	Methods: []http1.MethodDesc{

		{
			Path:    "/api.blog.v1.Post/CreatePost",
			Method:  "POST",
			Handler: _HTTP_Post_CreatePost_0,
		},

		{
			Path:    "/api.blog.v1.Post/UpdatePost",
			Method:  "POST",
			Handler: _HTTP_Post_UpdatePost_0,
		},

		{
			Path:    "/api.blog.v1.Post/DeletePost",
			Method:  "POST",
			Handler: _HTTP_Post_DeletePost_0,
		},

		{
			Path:    "/api.blog.v1.Post/GetPost",
			Method:  "POST",
			Handler: _HTTP_Post_GetPost_0,
		},

		{
			Path:    "/api.blog.v1.Post/ListPost",
			Method:  "POST",
			Handler: _HTTP_Post_ListPost_0,
		},
	},
	Metadata: "api/blog/v1/post.proto",
}
