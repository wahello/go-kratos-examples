// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// context./http.
const _ = http1.SupportPackageIsVersion1

type TagService interface {
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagReply, error)

	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagReply, error)

	GetTag(context.Context, *GetTagRequest) (*GetTagReply, error)

	ListTag(context.Context, *ListTagRequest) (*ListTagReply, error)

	UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagReply, error)
}

func RegisterTagHTTPServer(s *http1.Server, srv TagService) {
	r := s.Route("/")

	r.POST("/api.blog.v1.Tag/CreateTag", func(res http.ResponseWriter, req *http.Request) {
		in := new(CreateTagRequest)

		if err := http1.BindForm(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		h := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.(TagService).CreateTag(ctx, in)
		}
		out, err := s.Invoke(req.Context(), in, h)
		if err != nil {
			s.Error(res, req, err)
			return
		}
		s.Encode(res, req, out)
	})

	r.POST("/api.blog.v1.Tag/UpdateTag", func(res http.ResponseWriter, req *http.Request) {
		in := new(UpdateTagRequest)

		if err := http1.BindForm(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		h := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.(TagService).UpdateTag(ctx, in)
		}
		out, err := s.Invoke(req.Context(), in, h)
		if err != nil {
			s.Error(res, req, err)
			return
		}
		s.Encode(res, req, out)
	})

	r.POST("/api.blog.v1.Tag/DeleteTag", func(res http.ResponseWriter, req *http.Request) {
		in := new(DeleteTagRequest)

		if err := http1.BindForm(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		h := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.(TagService).DeleteTag(ctx, in)
		}
		out, err := s.Invoke(req.Context(), in, h)
		if err != nil {
			s.Error(res, req, err)
			return
		}
		s.Encode(res, req, out)
	})

	r.POST("/api.blog.v1.Tag/GetTag", func(res http.ResponseWriter, req *http.Request) {
		in := new(GetTagRequest)

		if err := http1.BindForm(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		h := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.(TagService).GetTag(ctx, in)
		}
		out, err := s.Invoke(req.Context(), in, h)
		if err != nil {
			s.Error(res, req, err)
			return
		}
		s.Encode(res, req, out)
	})

	r.POST("/api.blog.v1.Tag/ListTag", func(res http.ResponseWriter, req *http.Request) {
		in := new(ListTagRequest)

		if err := http1.BindForm(req, in); err != nil {
			s.Error(res, req, err)
			return
		}

		h := func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.(TagService).ListTag(ctx, in)
		}
		out, err := s.Invoke(req.Context(), in, h)
		if err != nil {
			s.Error(res, req, err)
			return
		}
		s.Encode(res, req, out)
	})

}
