// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// context./http.
const _ = http1.SupportPackageIsVersion1

type TagHTTPServer interface {
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagReply, error)

	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagReply, error)

	GetTag(context.Context, *GetTagRequest) (*GetTagReply, error)

	ListTag(context.Context, *ListTagRequest) (*ListTagReply, error)

	UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagReply, error)
}

func RegisterTagHTTPServer(s http1.ServiceRegistrar, srv TagHTTPServer) {
	s.RegisterService(&_HTTP_Tag_serviceDesc, srv)
}

func _HTTP_Tag_CreateTag_0(srv interface{}, ctx context.Context, req *http.Request) (interface{}, error) {
	var in CreateTagRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(TagServer).CreateTag(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Tag_UpdateTag_0(srv interface{}, ctx context.Context, req *http.Request) (interface{}, error) {
	var in UpdateTagRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(TagServer).UpdateTag(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Tag_DeleteTag_0(srv interface{}, ctx context.Context, req *http.Request) (interface{}, error) {
	var in DeleteTagRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(TagServer).DeleteTag(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Tag_GetTag_0(srv interface{}, ctx context.Context, req *http.Request) (interface{}, error) {
	var in GetTagRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(TagServer).GetTag(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Tag_ListTag_0(srv interface{}, ctx context.Context, req *http.Request) (interface{}, error) {
	var in ListTagRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(TagServer).ListTag(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _HTTP_Tag_serviceDesc = http1.ServiceDesc{
	ServiceName: "api.blog.v1.Tag",
	HandlerType: (*TagHTTPServer)(nil),
	Methods: []http1.MethodDesc{

		{
			Path:    "/api.blog.v1.Tag/CreateTag",
			Method:  "POST",
			Handler: _HTTP_Tag_CreateTag_0,
		},

		{
			Path:    "/api.blog.v1.Tag/UpdateTag",
			Method:  "POST",
			Handler: _HTTP_Tag_UpdateTag_0,
		},

		{
			Path:    "/api.blog.v1.Tag/DeleteTag",
			Method:  "POST",
			Handler: _HTTP_Tag_DeleteTag_0,
		},

		{
			Path:    "/api.blog.v1.Tag/GetTag",
			Method:  "POST",
			Handler: _HTTP_Tag_GetTag_0,
		},

		{
			Path:    "/api.blog.v1.Tag/ListTag",
			Method:  "POST",
			Handler: _HTTP_Tag_ListTag_0,
		},
	},
	Metadata: "api/blog/v1/tag.proto",
}
