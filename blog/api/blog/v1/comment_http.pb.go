// Code generated by protoc-gen-go-http. DO NOT EDIT.

package v1

import (
	context "context"
	http1 "github.com/go-kratos/kratos/v2/transport/http"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
// context./http.
const _ = http1.SupportPackageIsVersion1

type CommentHTTPServer interface {
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentReply, error)

	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentReply, error)

	GetComment(context.Context, *GetCommentRequest) (*GetCommentReply, error)

	ListComment(context.Context, *ListCommentRequest) (*ListCommentReply, error)

	UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentReply, error)
}

func RegisterCommentHTTPServer(s http1.ServiceRegistrar, srv CommentHTTPServer) {
	s.RegisterService(&_HTTP_Comment_serviceDesc, srv)
}

func _HTTP_Comment_CreateComment_0(srv interface{}, ctx context.Context, req *http.Request) (interface{}, error) {
	var in CreateCommentRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(CommentServer).CreateComment(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Comment_UpdateComment_0(srv interface{}, ctx context.Context, req *http.Request) (interface{}, error) {
	var in UpdateCommentRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(CommentServer).UpdateComment(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Comment_DeleteComment_0(srv interface{}, ctx context.Context, req *http.Request) (interface{}, error) {
	var in DeleteCommentRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(CommentServer).DeleteComment(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Comment_GetComment_0(srv interface{}, ctx context.Context, req *http.Request) (interface{}, error) {
	var in GetCommentRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(CommentServer).GetComment(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _HTTP_Comment_ListComment_0(srv interface{}, ctx context.Context, req *http.Request) (interface{}, error) {
	var in ListCommentRequest

	if err := http1.PopulateForm(&in, req); err != nil {
		return nil, err
	}

	out, err := srv.(CommentServer).ListComment(ctx, &in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _HTTP_Comment_serviceDesc = http1.ServiceDesc{
	ServiceName: "api.blog.v1.Comment",
	HandlerType: (*CommentHTTPServer)(nil),
	Methods: []http1.MethodDesc{

		{
			Path:    "/api.blog.v1.Comment/CreateComment",
			Method:  "POST",
			Handler: _HTTP_Comment_CreateComment_0,
		},

		{
			Path:    "/api.blog.v1.Comment/UpdateComment",
			Method:  "POST",
			Handler: _HTTP_Comment_UpdateComment_0,
		},

		{
			Path:    "/api.blog.v1.Comment/DeleteComment",
			Method:  "POST",
			Handler: _HTTP_Comment_DeleteComment_0,
		},

		{
			Path:    "/api.blog.v1.Comment/GetComment",
			Method:  "POST",
			Handler: _HTTP_Comment_GetComment_0,
		},

		{
			Path:    "/api.blog.v1.Comment/ListComment",
			Method:  "POST",
			Handler: _HTTP_Comment_ListComment_0,
		},
	},
	Metadata: "api/blog/v1/comment.proto",
}
